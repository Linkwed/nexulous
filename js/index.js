// Generated by CoffeeScript 1.7.1
(function() {
  var animate, camera, clock, container, controls, cube, effect, element, fullscreen, init, render, renderer, resize, scene, update;

  cube = null;

  scene = null;

  camera = null;

  effect = null;

  renderer = null;

  controls = null;

  element = null;

  container = null;

  clock = new THREE.Clock();

  init = function() {
    var face, geometry, i, light, material, mesh, ray, setOrientationControls, vertex, _i, _j, _k, _l, _len, _len1, _len2, _ref, _ref1, _ref2;
    renderer = new THREE.WebGLRenderer();
    element = renderer.domElement;
    container = document.getElementById('target');
    container.appendChild(element);
    effect = new THREE.StereoEffect(renderer);
    renderer.setClearColor(0xffffff);
    scene = new THREE.Scene();
    scene.fog = new THREE.FogExp2(0xffffff, 0.0025);
    light = new THREE.DirectionalLight(0xffffff, 1.5);
    light.position.set(1, 1, 1);
    scene.add(light);
    light = new THREE.DirectionalLight(0xffffff, 0.75);
    light.position.set(-1, -0.5, -1);
    scene.add(light);
    ray = new THREE.Raycaster();
    ray.ray.direction.set(0, -1, 0);
    geometry = new THREE.PlaneGeometry(2000, 2000, 100, 100);
    geometry.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI / 2));
    _ref = geometry.vertices;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      vertex = _ref[_i];
      vertex.x += Math.random() * 20 - 10;
      vertex.y += Math.random() * 2;
      vertex.z += Math.random() * 20 - 10;
    }
    _ref1 = geometry.faces;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      face = _ref1[_j];
      face.vertexColors[0] = new THREE.Color().setHSL(Math.random() * 0.2 + 0.5, 0.75, Math.random() * 0.25 + 0.75);
      face.vertexColors[1] = new THREE.Color().setHSL(Math.random() * 0.2 + 0.5, 0.75, Math.random() * 0.25 + 0.75);
      face.vertexColors[2] = new THREE.Color().setHSL(Math.random() * 0.2 + 0.5, 0.75, Math.random() * 0.25 + 0.75);
    }
    material = new THREE.MeshBasicMaterial({
      vertexColors: THREE.VertexColors
    });
    mesh = new THREE.Mesh(geometry, material);
    scene.add(mesh);
    geometry = new THREE.BoxGeometry(20, 20, 20);
    _ref2 = geometry.faces;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      face = _ref2[_k];
      face.vertexColors[0] = new THREE.Color().setHSL(Math.random() * 0.2 + 0.5, 0.75, Math.random() * 0.25 + 0.75);
      face.vertexColors[1] = new THREE.Color().setHSL(Math.random() * 0.2 + 0.5, 0.75, Math.random() * 0.25 + 0.75);
      face.vertexColors[2] = new THREE.Color().setHSL(Math.random() * 0.2 + 0.5, 0.75, Math.random() * 0.25 + 0.75);
    }
    for (i = _l = 0; _l < 200; i = ++_l) {
      material = new THREE.MeshPhongMaterial({
        specular: 0xffffff,
        shading: THREE.FlatShading,
        vertexColors: THREE.VertexColors
      });
      mesh = new THREE.Mesh(geometry, material);
      mesh.position.x = Math.floor(Math.random() * 20 - 10) * 80;
      mesh.position.y = Math.floor(Math.random() * 20) * 20 + 120;
      mesh.position.z = Math.floor(Math.random() * 20 - 10) * 80;
      scene.add(mesh);
      material.color.setHSL(Math.random() * 0.2 + 0.5, 0.75, Math.random() * 0.25 + 0.75);
    }
    camera = new THREE.PerspectiveCamera(90, 1, 0.001, 700);
    camera.position.set(0, 10, 0);
    scene.add(camera);
    controls = new THREE.OrbitControls(camera, element);
    controls.rotateUp(Math.PI / 4);
    controls.target.set(camera.position.x + 0.1, camera.position.y, camera.position.z);
    controls.noZoom = true;
    controls.noPan = true;
    controls.autoRotate = true;
    setOrientationControls = function(e) {
      if (!e.alpha) {
        return;
      }
      controls = new THREE.DeviceOrientationControls(camera, true);
      controls.connect();
      controls.update();
      element.addEventListener('click', fullscreen, false);
      return window.removeEventListener('deviceorientation', setOrientationControls);
    };
    window.addEventListener('deviceorientation', setOrientationControls, true);
    window.addEventListener('resize', resize, false);
    setTimeout(resize, 1);
    return window.addEventListener('resize', resize, false);
  };

  resize = function() {
    var height, width;
    width = container.offsetWidth;
    height = container.offsetHeight;
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize(width, height);
    return effect.setSize(width, height);
  };

  update = function(dt) {
    resize();
    camera.updateProjectionMatrix();
    return controls.update(dt);
  };

  render = function(dt) {
    return effect.render(scene, camera);
  };

  animate = function(t) {
    requestAnimationFrame(animate);
    update(clock.getDelta());
    return render(clock.getDelta());
  };

  fullscreen = function() {
    if (container.requestFullscreen) {
      return container.requestFullscreen();
    } else if (container.msRequestFullscreen) {
      return container.msRequestFullscreen();
    } else if (container.mozRequestFullScreen) {
      return container.mozRequestFullScreen();
    } else if (container.webkitRequestFullscreen) {
      return container.webkitRequestFullscreen();
    }
  };

  init();

  animate();

}).call(this);
