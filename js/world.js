// Generated by CoffeeScript 1.7.1
(function() {
  var animate, camera, container, cube, device, effect, init, renderer, scene;

  device = new THREEx.DeviceOrientationState();

  scene = null;

  camera = null;

  cube = null;

  effect = null;

  animate = function() {
    requestAnimationFrame(animate);
    camera.rotation.x = device.angleZ();
    camera.rotation.y = device.angleY();
    camera.rotation.z = device.angleX();
    return effect.render(scene, camera);
  };

  init = function() {
    var face, geometry, light, material, mesh, ray, vertex, _i, _j, _len, _len1, _ref, _ref1;
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);
    camera.position.z = 2;
    scene = new THREE.Scene();
    scene.fog = new THREE.Fog(0xffffff, 0, 750);
    light = new THREE.DirectionalLight(0xffffff, 1.5);
    light.position.set(1, 1, 1);
    scene.add(light);
    light = new THREE.DirectionalLight(0xffffff, 0.75);
    light.position.set(-1, -0.5, -1);
    scene.add(light);
    ray = new THREE.Raycaster();
    ray.ray.direction.set(0, -1, 0);
    geometry = new THREE.PlaneGeometry(2000, 2000, 100, 100);
    geometry.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI / 2));
    _ref = geometry.vertices;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      vertex = _ref[_i];
      vertex.x += Math.random() * 20 - 10;
      vertex.y += Math.random() * 2;
      vertex.z += Math.random() * 20 - 10;
    }
    _ref1 = geometry.faces;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      face = _ref1[_j];
      face.vertexColors[0] = new THREE.Color().setHSL(Math.random() * 0.2 + 0.5, 0.75, Math.random() * 0.25 + 0.75);
      face.vertexColors[1] = new THREE.Color().setHSL(Math.random() * 0.2 + 0.5, 0.75, Math.random() * 0.25 + 0.75);
      face.vertexColors[2] = new THREE.Color().setHSL(Math.random() * 0.2 + 0.5, 0.75, Math.random() * 0.25 + 0.75);
    }
    material = new THREE.MeshBasicMaterial({
      vertexColors: THREE.VertexColors
    });
    mesh = new THREE.Mesh(geometry, material);
    scene.add(mesh);
    effect = new THREE.OculusRiftEffect(renderer, {
      worldScale: 100
    });
    return effect.setSize(window.innerWidth, window.innerHeight);
  };

  container = document.createElement('div');

  document.body.appendChild(container);

  renderer = new THREE.WebGLRenderer();

  renderer.setSize(window.innerWidth, window.innerHeight);

  container.appendChild(renderer.domElement);

  init();

  animate();

}).call(this);
